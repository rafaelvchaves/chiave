syntax = "proto3";

import "google/protobuf/empty.proto";

option go_package = "kvs/proto/chiave";

package chiave;

service Chiave {
  rpc Get(Request) returns (GetResponse) {}
  rpc Increment(Request) returns (Response) {}
  rpc Decrement(Request) returns (Response) {}
  rpc AddSet(Request) returns (Response) {}
  rpc RemoveSet(Request) returns (Response) {}
  rpc ProcessEvent(Event) returns (google.protobuf.Empty) {}
}

message Response {
  repeated DVV context = 1;
}

message Request {
  string key = 1;
  int32 worker_id = 2;
  repeated string args = 3;
  Context context = 4;
}

message Context {
  Dot dot = 1;
}

message GetResponse {
  string value = 1;
  bool exists = 2;
  repeated DVV context = 3;
}

message DVV {
  map<string, int64> clock = 1;
  Dot dot = 2;
}

message Dot {
  string replica = 1;
  int64 n = 2;
}

enum DT {
  Counter = 0;
  Set = 1;
}

message Event {
  string source = 1;
  int32 dest = 2;
  string key = 3;
  DT datatype = 4;
  repeated DVV context = 5;
  oneof data {
    OpCounter op_counter = 6;
    StateCounter state_counter = 7;
    DeltaCounter delta_counter = 8;
    OpSet op_set = 9;
    StateSet state_set = 10;
  }
}

message OpCounter {
  int64 update = 1;
}

message StateCounter {
  GCounter pos = 1;
  GCounter neg = 2;
}

message DeltaCounter {
  map<string, int64> pos = 1;
  map<string, int64> neg = 2;
}

enum SET_OP {
  ADD = 0;
  REM = 1;
}

message OpSet {
  repeated SetOperation operations = 1;
}

message SetOperation {
  SET_OP op = 1;
  string element = 2;
  string tag = 3;
  repeated string remove_tags = 4;
}

message StateSet {
  map<string, GCounter> add = 1;
  map<string, GCounter> rem = 2;
}

message GCounter {
  map<string, int64> vec = 1;
  string replica = 2;
}