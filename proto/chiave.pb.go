// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.9
// source: chiave.proto

package chiave

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type DT int32

const (
	DT_Counter DT = 0
	DT_Set     DT = 1
)

// Enum value maps for DT.
var (
	DT_name = map[int32]string{
		0: "Counter",
		1: "Set",
	}
	DT_value = map[string]int32{
		"Counter": 0,
		"Set":     1,
	}
)

func (x DT) Enum() *DT {
	p := new(DT)
	*p = x
	return p
}

func (x DT) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DT) Descriptor() protoreflect.EnumDescriptor {
	return file_chiave_proto_enumTypes[0].Descriptor()
}

func (DT) Type() protoreflect.EnumType {
	return &file_chiave_proto_enumTypes[0]
}

func (x DT) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DT.Descriptor instead.
func (DT) EnumDescriptor() ([]byte, []int) {
	return file_chiave_proto_rawDescGZIP(), []int{0}
}

type SET_OP int32

const (
	SET_OP_ADD SET_OP = 0
	SET_OP_REM SET_OP = 1
)

// Enum value maps for SET_OP.
var (
	SET_OP_name = map[int32]string{
		0: "ADD",
		1: "REM",
	}
	SET_OP_value = map[string]int32{
		"ADD": 0,
		"REM": 1,
	}
)

func (x SET_OP) Enum() *SET_OP {
	p := new(SET_OP)
	*p = x
	return p
}

func (x SET_OP) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SET_OP) Descriptor() protoreflect.EnumDescriptor {
	return file_chiave_proto_enumTypes[1].Descriptor()
}

func (SET_OP) Type() protoreflect.EnumType {
	return &file_chiave_proto_enumTypes[1]
}

func (x SET_OP) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SET_OP.Descriptor instead.
func (SET_OP) EnumDescriptor() ([]byte, []int) {
	return file_chiave_proto_rawDescGZIP(), []int{1}
}

type Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Context *Context `protobuf:"bytes,1,opt,name=context,proto3" json:"context,omitempty"`
}

func (x *Response) Reset() {
	*x = Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chiave_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Response) ProtoMessage() {}

func (x *Response) ProtoReflect() protoreflect.Message {
	mi := &file_chiave_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Response.ProtoReflect.Descriptor instead.
func (*Response) Descriptor() ([]byte, []int) {
	return file_chiave_proto_rawDescGZIP(), []int{0}
}

func (x *Response) GetContext() *Context {
	if x != nil {
		return x.Context
	}
	return nil
}

type Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key      string   `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	WorkerId int32    `protobuf:"varint,2,opt,name=worker_id,json=workerId,proto3" json:"worker_id,omitempty"`
	Args     []string `protobuf:"bytes,3,rep,name=args,proto3" json:"args,omitempty"`
	Context  *Context `protobuf:"bytes,4,opt,name=context,proto3" json:"context,omitempty"`
}

func (x *Request) Reset() {
	*x = Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chiave_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Request) ProtoMessage() {}

func (x *Request) ProtoReflect() protoreflect.Message {
	mi := &file_chiave_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Request.ProtoReflect.Descriptor instead.
func (*Request) Descriptor() ([]byte, []int) {
	return file_chiave_proto_rawDescGZIP(), []int{1}
}

func (x *Request) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *Request) GetWorkerId() int32 {
	if x != nil {
		return x.WorkerId
	}
	return 0
}

func (x *Request) GetArgs() []string {
	if x != nil {
		return x.Args
	}
	return nil
}

func (x *Request) GetContext() *Context {
	if x != nil {
		return x.Context
	}
	return nil
}

type Context struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dot *Dot `protobuf:"bytes,1,opt,name=dot,proto3" json:"dot,omitempty"`
	Dvv *DVV `protobuf:"bytes,2,opt,name=dvv,proto3" json:"dvv,omitempty"`
}

func (x *Context) Reset() {
	*x = Context{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chiave_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Context) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Context) ProtoMessage() {}

func (x *Context) ProtoReflect() protoreflect.Message {
	mi := &file_chiave_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Context.ProtoReflect.Descriptor instead.
func (*Context) Descriptor() ([]byte, []int) {
	return file_chiave_proto_rawDescGZIP(), []int{2}
}

func (x *Context) GetDot() *Dot {
	if x != nil {
		return x.Dot
	}
	return nil
}

func (x *Context) GetDvv() *DVV {
	if x != nil {
		return x.Dvv
	}
	return nil
}

type GetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value   string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	Exists  bool   `protobuf:"varint,2,opt,name=exists,proto3" json:"exists,omitempty"`
	Context []*DVV `protobuf:"bytes,3,rep,name=context,proto3" json:"context,omitempty"`
}

func (x *GetResponse) Reset() {
	*x = GetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chiave_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetResponse) ProtoMessage() {}

func (x *GetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_chiave_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetResponse.ProtoReflect.Descriptor instead.
func (*GetResponse) Descriptor() ([]byte, []int) {
	return file_chiave_proto_rawDescGZIP(), []int{3}
}

func (x *GetResponse) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *GetResponse) GetExists() bool {
	if x != nil {
		return x.Exists
	}
	return false
}

func (x *GetResponse) GetContext() []*DVV {
	if x != nil {
		return x.Context
	}
	return nil
}

type DVV struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Clock map[string]int64 `protobuf:"bytes,1,rep,name=clock,proto3" json:"clock,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	Dot   *Dot             `protobuf:"bytes,2,opt,name=dot,proto3" json:"dot,omitempty"`
}

func (x *DVV) Reset() {
	*x = DVV{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chiave_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DVV) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DVV) ProtoMessage() {}

func (x *DVV) ProtoReflect() protoreflect.Message {
	mi := &file_chiave_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DVV.ProtoReflect.Descriptor instead.
func (*DVV) Descriptor() ([]byte, []int) {
	return file_chiave_proto_rawDescGZIP(), []int{4}
}

func (x *DVV) GetClock() map[string]int64 {
	if x != nil {
		return x.Clock
	}
	return nil
}

func (x *DVV) GetDot() *Dot {
	if x != nil {
		return x.Dot
	}
	return nil
}

type Dot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Replica string `protobuf:"bytes,1,opt,name=replica,proto3" json:"replica,omitempty"`
	N       int64  `protobuf:"varint,2,opt,name=n,proto3" json:"n,omitempty"`
}

func (x *Dot) Reset() {
	*x = Dot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chiave_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Dot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Dot) ProtoMessage() {}

func (x *Dot) ProtoReflect() protoreflect.Message {
	mi := &file_chiave_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Dot.ProtoReflect.Descriptor instead.
func (*Dot) Descriptor() ([]byte, []int) {
	return file_chiave_proto_rawDescGZIP(), []int{5}
}

func (x *Dot) GetReplica() string {
	if x != nil {
		return x.Replica
	}
	return ""
}

func (x *Dot) GetN() int64 {
	if x != nil {
		return x.N
	}
	return 0
}

type Event struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Source   string `protobuf:"bytes,1,opt,name=source,proto3" json:"source,omitempty"`
	Dest     int32  `protobuf:"varint,2,opt,name=dest,proto3" json:"dest,omitempty"`
	Key      string `protobuf:"bytes,3,opt,name=key,proto3" json:"key,omitempty"`
	Datatype DT     `protobuf:"varint,4,opt,name=datatype,proto3,enum=chiave.DT" json:"datatype,omitempty"`
	Context  []*DVV `protobuf:"bytes,5,rep,name=context,proto3" json:"context,omitempty"`
	// Types that are assignable to Data:
	//	*Event_OpCounter
	//	*Event_StateCounter
	//	*Event_DeltaCounter
	//	*Event_OpSet
	//	*Event_StateSet
	//	*Event_DeltaSet
	Data isEvent_Data `protobuf_oneof:"data"`
}

func (x *Event) Reset() {
	*x = Event{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chiave_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Event) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Event) ProtoMessage() {}

func (x *Event) ProtoReflect() protoreflect.Message {
	mi := &file_chiave_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Event.ProtoReflect.Descriptor instead.
func (*Event) Descriptor() ([]byte, []int) {
	return file_chiave_proto_rawDescGZIP(), []int{6}
}

func (x *Event) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *Event) GetDest() int32 {
	if x != nil {
		return x.Dest
	}
	return 0
}

func (x *Event) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *Event) GetDatatype() DT {
	if x != nil {
		return x.Datatype
	}
	return DT_Counter
}

func (x *Event) GetContext() []*DVV {
	if x != nil {
		return x.Context
	}
	return nil
}

func (m *Event) GetData() isEvent_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (x *Event) GetOpCounter() *OpCounter {
	if x, ok := x.GetData().(*Event_OpCounter); ok {
		return x.OpCounter
	}
	return nil
}

func (x *Event) GetStateCounter() *StateCounter {
	if x, ok := x.GetData().(*Event_StateCounter); ok {
		return x.StateCounter
	}
	return nil
}

func (x *Event) GetDeltaCounter() *DeltaCounter {
	if x, ok := x.GetData().(*Event_DeltaCounter); ok {
		return x.DeltaCounter
	}
	return nil
}

func (x *Event) GetOpSet() *OpSet {
	if x, ok := x.GetData().(*Event_OpSet); ok {
		return x.OpSet
	}
	return nil
}

func (x *Event) GetStateSet() *StateSet {
	if x, ok := x.GetData().(*Event_StateSet); ok {
		return x.StateSet
	}
	return nil
}

func (x *Event) GetDeltaSet() *DeltaSet {
	if x, ok := x.GetData().(*Event_DeltaSet); ok {
		return x.DeltaSet
	}
	return nil
}

type isEvent_Data interface {
	isEvent_Data()
}

type Event_OpCounter struct {
	OpCounter *OpCounter `protobuf:"bytes,6,opt,name=op_counter,json=opCounter,proto3,oneof"`
}

type Event_StateCounter struct {
	StateCounter *StateCounter `protobuf:"bytes,7,opt,name=state_counter,json=stateCounter,proto3,oneof"`
}

type Event_DeltaCounter struct {
	DeltaCounter *DeltaCounter `protobuf:"bytes,8,opt,name=delta_counter,json=deltaCounter,proto3,oneof"`
}

type Event_OpSet struct {
	OpSet *OpSet `protobuf:"bytes,9,opt,name=op_set,json=opSet,proto3,oneof"`
}

type Event_StateSet struct {
	StateSet *StateSet `protobuf:"bytes,10,opt,name=state_set,json=stateSet,proto3,oneof"`
}

type Event_DeltaSet struct {
	DeltaSet *DeltaSet `protobuf:"bytes,11,opt,name=delta_set,json=deltaSet,proto3,oneof"`
}

func (*Event_OpCounter) isEvent_Data() {}

func (*Event_StateCounter) isEvent_Data() {}

func (*Event_DeltaCounter) isEvent_Data() {}

func (*Event_OpSet) isEvent_Data() {}

func (*Event_StateSet) isEvent_Data() {}

func (*Event_DeltaSet) isEvent_Data() {}

type OpCounter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Update int64 `protobuf:"varint,1,opt,name=update,proto3" json:"update,omitempty"`
}

func (x *OpCounter) Reset() {
	*x = OpCounter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chiave_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpCounter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpCounter) ProtoMessage() {}

func (x *OpCounter) ProtoReflect() protoreflect.Message {
	mi := &file_chiave_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpCounter.ProtoReflect.Descriptor instead.
func (*OpCounter) Descriptor() ([]byte, []int) {
	return file_chiave_proto_rawDescGZIP(), []int{7}
}

func (x *OpCounter) GetUpdate() int64 {
	if x != nil {
		return x.Update
	}
	return 0
}

type StateCounter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pos *GCounter `protobuf:"bytes,1,opt,name=pos,proto3" json:"pos,omitempty"`
	Neg *GCounter `protobuf:"bytes,2,opt,name=neg,proto3" json:"neg,omitempty"`
}

func (x *StateCounter) Reset() {
	*x = StateCounter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chiave_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StateCounter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StateCounter) ProtoMessage() {}

func (x *StateCounter) ProtoReflect() protoreflect.Message {
	mi := &file_chiave_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StateCounter.ProtoReflect.Descriptor instead.
func (*StateCounter) Descriptor() ([]byte, []int) {
	return file_chiave_proto_rawDescGZIP(), []int{8}
}

func (x *StateCounter) GetPos() *GCounter {
	if x != nil {
		return x.Pos
	}
	return nil
}

func (x *StateCounter) GetNeg() *GCounter {
	if x != nil {
		return x.Neg
	}
	return nil
}

type GCounter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Vec     map[string]int64 `protobuf:"bytes,1,rep,name=vec,proto3" json:"vec,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	Replica string           `protobuf:"bytes,2,opt,name=replica,proto3" json:"replica,omitempty"`
}

func (x *GCounter) Reset() {
	*x = GCounter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chiave_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GCounter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GCounter) ProtoMessage() {}

func (x *GCounter) ProtoReflect() protoreflect.Message {
	mi := &file_chiave_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GCounter.ProtoReflect.Descriptor instead.
func (*GCounter) Descriptor() ([]byte, []int) {
	return file_chiave_proto_rawDescGZIP(), []int{9}
}

func (x *GCounter) GetVec() map[string]int64 {
	if x != nil {
		return x.Vec
	}
	return nil
}

func (x *GCounter) GetReplica() string {
	if x != nil {
		return x.Replica
	}
	return ""
}

type DeltaCounter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pos map[string]int64 `protobuf:"bytes,1,rep,name=pos,proto3" json:"pos,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	Neg map[string]int64 `protobuf:"bytes,2,rep,name=neg,proto3" json:"neg,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *DeltaCounter) Reset() {
	*x = DeltaCounter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chiave_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeltaCounter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeltaCounter) ProtoMessage() {}

func (x *DeltaCounter) ProtoReflect() protoreflect.Message {
	mi := &file_chiave_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeltaCounter.ProtoReflect.Descriptor instead.
func (*DeltaCounter) Descriptor() ([]byte, []int) {
	return file_chiave_proto_rawDescGZIP(), []int{10}
}

func (x *DeltaCounter) GetPos() map[string]int64 {
	if x != nil {
		return x.Pos
	}
	return nil
}

func (x *DeltaCounter) GetNeg() map[string]int64 {
	if x != nil {
		return x.Neg
	}
	return nil
}

type OpSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Operations []*SetOperation `protobuf:"bytes,1,rep,name=operations,proto3" json:"operations,omitempty"`
}

func (x *OpSet) Reset() {
	*x = OpSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chiave_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpSet) ProtoMessage() {}

func (x *OpSet) ProtoReflect() protoreflect.Message {
	mi := &file_chiave_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpSet.ProtoReflect.Descriptor instead.
func (*OpSet) Descriptor() ([]byte, []int) {
	return file_chiave_proto_rawDescGZIP(), []int{11}
}

func (x *OpSet) GetOperations() []*SetOperation {
	if x != nil {
		return x.Operations
	}
	return nil
}

type SetOperation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Op         SET_OP   `protobuf:"varint,1,opt,name=op,proto3,enum=chiave.SET_OP" json:"op,omitempty"`
	Element    string   `protobuf:"bytes,2,opt,name=element,proto3" json:"element,omitempty"`
	Tag        string   `protobuf:"bytes,3,opt,name=tag,proto3" json:"tag,omitempty"`
	RemoveTags []string `protobuf:"bytes,4,rep,name=remove_tags,json=removeTags,proto3" json:"remove_tags,omitempty"`
}

func (x *SetOperation) Reset() {
	*x = SetOperation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chiave_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetOperation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetOperation) ProtoMessage() {}

func (x *SetOperation) ProtoReflect() protoreflect.Message {
	mi := &file_chiave_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetOperation.ProtoReflect.Descriptor instead.
func (*SetOperation) Descriptor() ([]byte, []int) {
	return file_chiave_proto_rawDescGZIP(), []int{12}
}

func (x *SetOperation) GetOp() SET_OP {
	if x != nil {
		return x.Op
	}
	return SET_OP_ADD
}

func (x *SetOperation) GetElement() string {
	if x != nil {
		return x.Element
	}
	return ""
}

func (x *SetOperation) GetTag() string {
	if x != nil {
		return x.Tag
	}
	return ""
}

func (x *SetOperation) GetRemoveTags() []string {
	if x != nil {
		return x.RemoveTags
	}
	return nil
}

type StateSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Elements map[string]*Dots `protobuf:"bytes,1,rep,name=elements,proto3" json:"elements,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	History  map[string]int64 `protobuf:"bytes,2,rep,name=history,proto3" json:"history,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *StateSet) Reset() {
	*x = StateSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chiave_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StateSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StateSet) ProtoMessage() {}

func (x *StateSet) ProtoReflect() protoreflect.Message {
	mi := &file_chiave_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StateSet.ProtoReflect.Descriptor instead.
func (*StateSet) Descriptor() ([]byte, []int) {
	return file_chiave_proto_rawDescGZIP(), []int{13}
}

func (x *StateSet) GetElements() map[string]*Dots {
	if x != nil {
		return x.Elements
	}
	return nil
}

func (x *StateSet) GetHistory() map[string]int64 {
	if x != nil {
		return x.History
	}
	return nil
}

type DeltaSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Add map[string]*Dots `protobuf:"bytes,1,rep,name=add,proto3" json:"add,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Rem map[string]*Dots `protobuf:"bytes,2,rep,name=rem,proto3" json:"rem,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	DVV *DVV             `protobuf:"bytes,3,opt,name=DVV,proto3" json:"DVV,omitempty"`
}

func (x *DeltaSet) Reset() {
	*x = DeltaSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chiave_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeltaSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeltaSet) ProtoMessage() {}

func (x *DeltaSet) ProtoReflect() protoreflect.Message {
	mi := &file_chiave_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeltaSet.ProtoReflect.Descriptor instead.
func (*DeltaSet) Descriptor() ([]byte, []int) {
	return file_chiave_proto_rawDescGZIP(), []int{14}
}

func (x *DeltaSet) GetAdd() map[string]*Dots {
	if x != nil {
		return x.Add
	}
	return nil
}

func (x *DeltaSet) GetRem() map[string]*Dots {
	if x != nil {
		return x.Rem
	}
	return nil
}

func (x *DeltaSet) GetDVV() *DVV {
	if x != nil {
		return x.DVV
	}
	return nil
}

type Dots struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dots []*Dot `protobuf:"bytes,1,rep,name=dots,proto3" json:"dots,omitempty"`
}

func (x *Dots) Reset() {
	*x = Dots{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chiave_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Dots) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Dots) ProtoMessage() {}

func (x *Dots) ProtoReflect() protoreflect.Message {
	mi := &file_chiave_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Dots.ProtoReflect.Descriptor instead.
func (*Dots) Descriptor() ([]byte, []int) {
	return file_chiave_proto_rawDescGZIP(), []int{15}
}

func (x *Dots) GetDots() []*Dot {
	if x != nil {
		return x.Dots
	}
	return nil
}

var File_chiave_proto protoreflect.FileDescriptor

var file_chiave_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x63, 0x68, 0x69, 0x61, 0x76, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06,
	0x63, 0x68, 0x69, 0x61, 0x76, 0x65, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0x35, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x29, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x63, 0x68, 0x69, 0x61, 0x76, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x22, 0x77, 0x0a, 0x07, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x77, 0x6f, 0x72, 0x6b, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x77, 0x6f, 0x72, 0x6b,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x72, 0x67, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x04, 0x61, 0x72, 0x67, 0x73, 0x12, 0x29, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x68, 0x69, 0x61,
	0x76, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x22, 0x47, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x1d,
	0x0a, 0x03, 0x64, 0x6f, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x63, 0x68,
	0x69, 0x61, 0x76, 0x65, 0x2e, 0x44, 0x6f, 0x74, 0x52, 0x03, 0x64, 0x6f, 0x74, 0x12, 0x1d, 0x0a,
	0x03, 0x64, 0x76, 0x76, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x63, 0x68, 0x69,
	0x61, 0x76, 0x65, 0x2e, 0x44, 0x56, 0x56, 0x52, 0x03, 0x64, 0x76, 0x76, 0x22, 0x62, 0x0a, 0x0b,
	0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x06, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x12, 0x25, 0x0a, 0x07, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x63, 0x68, 0x69,
	0x61, 0x76, 0x65, 0x2e, 0x44, 0x56, 0x56, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x22, 0x8c, 0x01, 0x0a, 0x03, 0x44, 0x56, 0x56, 0x12, 0x2c, 0x0a, 0x05, 0x63, 0x6c, 0x6f, 0x63,
	0x6b, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x68, 0x69, 0x61, 0x76, 0x65,
	0x2e, 0x44, 0x56, 0x56, 0x2e, 0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x05, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x1d, 0x0a, 0x03, 0x64, 0x6f, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x63, 0x68, 0x69, 0x61, 0x76, 0x65, 0x2e, 0x44, 0x6f, 0x74,
	0x52, 0x03, 0x64, 0x6f, 0x74, 0x1a, 0x38, 0x0a, 0x0a, 0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0x2d, 0x0a, 0x03, 0x44, 0x6f, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x12, 0x0c, 0x0a, 0x01, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x01, 0x6e, 0x22, 0xd4,
	0x03, 0x0a, 0x05, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x64, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x26, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x61, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0a, 0x2e, 0x63, 0x68, 0x69, 0x61, 0x76,
	0x65, 0x2e, 0x44, 0x54, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x74, 0x79, 0x70, 0x65, 0x12, 0x25,
	0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0b, 0x2e, 0x63, 0x68, 0x69, 0x61, 0x76, 0x65, 0x2e, 0x44, 0x56, 0x56, 0x52, 0x07, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x32, 0x0a, 0x0a, 0x6f, 0x70, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x68, 0x69, 0x61,
	0x76, 0x65, 0x2e, 0x4f, 0x70, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x48, 0x00, 0x52, 0x09,
	0x6f, 0x70, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x3b, 0x0a, 0x0d, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x63, 0x68, 0x69, 0x61, 0x76, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x48, 0x00, 0x52, 0x0c, 0x73, 0x74, 0x61, 0x74, 0x65, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x3b, 0x0a, 0x0d, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x63, 0x68, 0x69, 0x61, 0x76, 0x65, 0x2e, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x65, 0x72, 0x48, 0x00, 0x52, 0x0c, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x65, 0x72, 0x12, 0x26, 0x0a, 0x06, 0x6f, 0x70, 0x5f, 0x73, 0x65, 0x74, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x63, 0x68, 0x69, 0x61, 0x76, 0x65, 0x2e, 0x4f, 0x70, 0x53,
	0x65, 0x74, 0x48, 0x00, 0x52, 0x05, 0x6f, 0x70, 0x53, 0x65, 0x74, 0x12, 0x2f, 0x0a, 0x09, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x65, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10,
	0x2e, 0x63, 0x68, 0x69, 0x61, 0x76, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x53, 0x65, 0x74,
	0x48, 0x00, 0x52, 0x08, 0x73, 0x74, 0x61, 0x74, 0x65, 0x53, 0x65, 0x74, 0x12, 0x2f, 0x0a, 0x09,
	0x64, 0x65, 0x6c, 0x74, 0x61, 0x5f, 0x73, 0x65, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x10, 0x2e, 0x63, 0x68, 0x69, 0x61, 0x76, 0x65, 0x2e, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x53, 0x65,
	0x74, 0x48, 0x00, 0x52, 0x08, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x53, 0x65, 0x74, 0x42, 0x06, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x23, 0x0a, 0x09, 0x4f, 0x70, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x06, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x22, 0x56, 0x0a, 0x0c, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x03, 0x70, 0x6f,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63, 0x68, 0x69, 0x61, 0x76, 0x65,
	0x2e, 0x47, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x52, 0x03, 0x70, 0x6f, 0x73, 0x12, 0x22,
	0x0a, 0x03, 0x6e, 0x65, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63, 0x68,
	0x69, 0x61, 0x76, 0x65, 0x2e, 0x47, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x52, 0x03, 0x6e,
	0x65, 0x67, 0x22, 0x89, 0x01, 0x0a, 0x08, 0x47, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x12,
	0x2b, 0x0a, 0x03, 0x76, 0x65, 0x63, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63,
	0x68, 0x69, 0x61, 0x76, 0x65, 0x2e, 0x47, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x56,
	0x65, 0x63, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x03, 0x76, 0x65, 0x63, 0x12, 0x18, 0x0a, 0x07,
	0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72,
	0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x1a, 0x36, 0x0a, 0x08, 0x56, 0x65, 0x63, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xe0,
	0x01, 0x0a, 0x0c, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x12,
	0x2f, 0x0a, 0x03, 0x70, 0x6f, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63,
	0x68, 0x69, 0x61, 0x76, 0x65, 0x2e, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x65, 0x72, 0x2e, 0x50, 0x6f, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x03, 0x70, 0x6f, 0x73,
	0x12, 0x2f, 0x0a, 0x03, 0x6e, 0x65, 0x67, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x63, 0x68, 0x69, 0x61, 0x76, 0x65, 0x2e, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x65, 0x72, 0x2e, 0x4e, 0x65, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x03, 0x6e, 0x65,
	0x67, 0x1a, 0x36, 0x0a, 0x08, 0x50, 0x6f, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x36, 0x0a, 0x08, 0x4e, 0x65, 0x67,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0x3d, 0x0a, 0x05, 0x4f, 0x70, 0x53, 0x65, 0x74, 0x12, 0x34, 0x0a, 0x0a, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x63, 0x68, 0x69, 0x61, 0x76, 0x65, 0x2e, 0x53, 0x65, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x22, 0x7b, 0x0a, 0x0c, 0x53, 0x65, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x1e, 0x0a, 0x02, 0x6f, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x63,
	0x68, 0x69, 0x61, 0x76, 0x65, 0x2e, 0x53, 0x45, 0x54, 0x5f, 0x4f, 0x50, 0x52, 0x02, 0x6f, 0x70,
	0x12, 0x18, 0x0a, 0x07, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x61,
	0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x74, 0x61, 0x67, 0x12, 0x1f, 0x0a, 0x0b,
	0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x5f, 0x74, 0x61, 0x67, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0a, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x54, 0x61, 0x67, 0x73, 0x22, 0x86, 0x02,
	0x0a, 0x08, 0x53, 0x74, 0x61, 0x74, 0x65, 0x53, 0x65, 0x74, 0x12, 0x3a, 0x0a, 0x08, 0x65, 0x6c,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63,
	0x68, 0x69, 0x61, 0x76, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x53, 0x65, 0x74, 0x2e, 0x45,
	0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x65, 0x6c,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x37, 0x0a, 0x07, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72,
	0x79, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x68, 0x69, 0x61, 0x76, 0x65,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x53, 0x65, 0x74, 0x2e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72,
	0x79, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x1a,
	0x49, 0x0a, 0x0d, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x22, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0c, 0x2e, 0x63, 0x68, 0x69, 0x61, 0x76, 0x65, 0x2e, 0x44, 0x6f, 0x74, 0x73, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3a, 0x0a, 0x0c, 0x48, 0x69,
	0x73, 0x74, 0x6f, 0x72, 0x79, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x8f, 0x02, 0x0a, 0x08, 0x44, 0x65, 0x6c, 0x74, 0x61,
	0x53, 0x65, 0x74, 0x12, 0x2b, 0x0a, 0x03, 0x61, 0x64, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x63, 0x68, 0x69, 0x61, 0x76, 0x65, 0x2e, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x53,
	0x65, 0x74, 0x2e, 0x41, 0x64, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x03, 0x61, 0x64, 0x64,
	0x12, 0x2b, 0x0a, 0x03, 0x72, 0x65, 0x6d, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x63, 0x68, 0x69, 0x61, 0x76, 0x65, 0x2e, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x53, 0x65, 0x74, 0x2e,
	0x52, 0x65, 0x6d, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x03, 0x72, 0x65, 0x6d, 0x12, 0x1d, 0x0a,
	0x03, 0x44, 0x56, 0x56, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x63, 0x68, 0x69,
	0x61, 0x76, 0x65, 0x2e, 0x44, 0x56, 0x56, 0x52, 0x03, 0x44, 0x56, 0x56, 0x1a, 0x44, 0x0a, 0x08,
	0x41, 0x64, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x22, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x63, 0x68, 0x69, 0x61,
	0x76, 0x65, 0x2e, 0x44, 0x6f, 0x74, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x1a, 0x44, 0x0a, 0x08, 0x52, 0x65, 0x6d, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x22, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0c, 0x2e, 0x63, 0x68, 0x69, 0x61, 0x76, 0x65, 0x2e, 0x44, 0x6f, 0x74, 0x73, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x27, 0x0a, 0x04, 0x44, 0x6f, 0x74, 0x73,
	0x12, 0x1f, 0x0a, 0x04, 0x64, 0x6f, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b,
	0x2e, 0x63, 0x68, 0x69, 0x61, 0x76, 0x65, 0x2e, 0x44, 0x6f, 0x74, 0x52, 0x04, 0x64, 0x6f, 0x74,
	0x73, 0x2a, 0x1a, 0x0a, 0x02, 0x44, 0x54, 0x12, 0x0b, 0x0a, 0x07, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x65, 0x72, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x53, 0x65, 0x74, 0x10, 0x01, 0x2a, 0x1a, 0x0a,
	0x06, 0x53, 0x45, 0x54, 0x5f, 0x4f, 0x50, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x44, 0x44, 0x10, 0x00,
	0x12, 0x07, 0x0a, 0x03, 0x52, 0x45, 0x4d, 0x10, 0x01, 0x32, 0xb5, 0x02, 0x0a, 0x06, 0x43, 0x68,
	0x69, 0x61, 0x76, 0x65, 0x12, 0x2d, 0x0a, 0x03, 0x47, 0x65, 0x74, 0x12, 0x0f, 0x2e, 0x63, 0x68,
	0x69, 0x61, 0x76, 0x65, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x63,
	0x68, 0x69, 0x61, 0x76, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x30, 0x0a, 0x09, 0x49, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x12, 0x0f, 0x2e, 0x63, 0x68, 0x69, 0x61, 0x76, 0x65, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x10, 0x2e, 0x63, 0x68, 0x69, 0x61, 0x76, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x30, 0x0a, 0x09, 0x44, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x12, 0x0f, 0x2e, 0x63, 0x68, 0x69, 0x61, 0x76, 0x65, 0x2e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x10, 0x2e, 0x63, 0x68, 0x69, 0x61, 0x76, 0x65, 0x2e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x2d, 0x0a, 0x06, 0x41, 0x64, 0x64, 0x53, 0x65,
	0x74, 0x12, 0x0f, 0x2e, 0x63, 0x68, 0x69, 0x61, 0x76, 0x65, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x10, 0x2e, 0x63, 0x68, 0x69, 0x61, 0x76, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x30, 0x0a, 0x09, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x53, 0x65, 0x74, 0x12, 0x0f, 0x2e, 0x63, 0x68, 0x69, 0x61, 0x76, 0x65, 0x2e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x10, 0x2e, 0x63, 0x68, 0x69, 0x61, 0x76, 0x65, 0x2e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x37, 0x0a, 0x0c, 0x50, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x0d, 0x2e, 0x63, 0x68, 0x69, 0x61, 0x76,
	0x65, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22,
	0x00, 0x42, 0x12, 0x5a, 0x10, 0x6b, 0x76, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63,
	0x68, 0x69, 0x61, 0x76, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_chiave_proto_rawDescOnce sync.Once
	file_chiave_proto_rawDescData = file_chiave_proto_rawDesc
)

func file_chiave_proto_rawDescGZIP() []byte {
	file_chiave_proto_rawDescOnce.Do(func() {
		file_chiave_proto_rawDescData = protoimpl.X.CompressGZIP(file_chiave_proto_rawDescData)
	})
	return file_chiave_proto_rawDescData
}

var file_chiave_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_chiave_proto_msgTypes = make([]protoimpl.MessageInfo, 24)
var file_chiave_proto_goTypes = []interface{}{
	(DT)(0),               // 0: chiave.DT
	(SET_OP)(0),           // 1: chiave.SET_OP
	(*Response)(nil),      // 2: chiave.Response
	(*Request)(nil),       // 3: chiave.Request
	(*Context)(nil),       // 4: chiave.Context
	(*GetResponse)(nil),   // 5: chiave.GetResponse
	(*DVV)(nil),           // 6: chiave.DVV
	(*Dot)(nil),           // 7: chiave.Dot
	(*Event)(nil),         // 8: chiave.Event
	(*OpCounter)(nil),     // 9: chiave.OpCounter
	(*StateCounter)(nil),  // 10: chiave.StateCounter
	(*GCounter)(nil),      // 11: chiave.GCounter
	(*DeltaCounter)(nil),  // 12: chiave.DeltaCounter
	(*OpSet)(nil),         // 13: chiave.OpSet
	(*SetOperation)(nil),  // 14: chiave.SetOperation
	(*StateSet)(nil),      // 15: chiave.StateSet
	(*DeltaSet)(nil),      // 16: chiave.DeltaSet
	(*Dots)(nil),          // 17: chiave.Dots
	nil,                   // 18: chiave.DVV.ClockEntry
	nil,                   // 19: chiave.GCounter.VecEntry
	nil,                   // 20: chiave.DeltaCounter.PosEntry
	nil,                   // 21: chiave.DeltaCounter.NegEntry
	nil,                   // 22: chiave.StateSet.ElementsEntry
	nil,                   // 23: chiave.StateSet.HistoryEntry
	nil,                   // 24: chiave.DeltaSet.AddEntry
	nil,                   // 25: chiave.DeltaSet.RemEntry
	(*emptypb.Empty)(nil), // 26: google.protobuf.Empty
}
var file_chiave_proto_depIdxs = []int32{
	4,  // 0: chiave.Response.context:type_name -> chiave.Context
	4,  // 1: chiave.Request.context:type_name -> chiave.Context
	7,  // 2: chiave.Context.dot:type_name -> chiave.Dot
	6,  // 3: chiave.Context.dvv:type_name -> chiave.DVV
	6,  // 4: chiave.GetResponse.context:type_name -> chiave.DVV
	18, // 5: chiave.DVV.clock:type_name -> chiave.DVV.ClockEntry
	7,  // 6: chiave.DVV.dot:type_name -> chiave.Dot
	0,  // 7: chiave.Event.datatype:type_name -> chiave.DT
	6,  // 8: chiave.Event.context:type_name -> chiave.DVV
	9,  // 9: chiave.Event.op_counter:type_name -> chiave.OpCounter
	10, // 10: chiave.Event.state_counter:type_name -> chiave.StateCounter
	12, // 11: chiave.Event.delta_counter:type_name -> chiave.DeltaCounter
	13, // 12: chiave.Event.op_set:type_name -> chiave.OpSet
	15, // 13: chiave.Event.state_set:type_name -> chiave.StateSet
	16, // 14: chiave.Event.delta_set:type_name -> chiave.DeltaSet
	11, // 15: chiave.StateCounter.pos:type_name -> chiave.GCounter
	11, // 16: chiave.StateCounter.neg:type_name -> chiave.GCounter
	19, // 17: chiave.GCounter.vec:type_name -> chiave.GCounter.VecEntry
	20, // 18: chiave.DeltaCounter.pos:type_name -> chiave.DeltaCounter.PosEntry
	21, // 19: chiave.DeltaCounter.neg:type_name -> chiave.DeltaCounter.NegEntry
	14, // 20: chiave.OpSet.operations:type_name -> chiave.SetOperation
	1,  // 21: chiave.SetOperation.op:type_name -> chiave.SET_OP
	22, // 22: chiave.StateSet.elements:type_name -> chiave.StateSet.ElementsEntry
	23, // 23: chiave.StateSet.history:type_name -> chiave.StateSet.HistoryEntry
	24, // 24: chiave.DeltaSet.add:type_name -> chiave.DeltaSet.AddEntry
	25, // 25: chiave.DeltaSet.rem:type_name -> chiave.DeltaSet.RemEntry
	6,  // 26: chiave.DeltaSet.DVV:type_name -> chiave.DVV
	7,  // 27: chiave.Dots.dots:type_name -> chiave.Dot
	17, // 28: chiave.StateSet.ElementsEntry.value:type_name -> chiave.Dots
	17, // 29: chiave.DeltaSet.AddEntry.value:type_name -> chiave.Dots
	17, // 30: chiave.DeltaSet.RemEntry.value:type_name -> chiave.Dots
	3,  // 31: chiave.Chiave.Get:input_type -> chiave.Request
	3,  // 32: chiave.Chiave.Increment:input_type -> chiave.Request
	3,  // 33: chiave.Chiave.Decrement:input_type -> chiave.Request
	3,  // 34: chiave.Chiave.AddSet:input_type -> chiave.Request
	3,  // 35: chiave.Chiave.RemoveSet:input_type -> chiave.Request
	8,  // 36: chiave.Chiave.ProcessEvent:input_type -> chiave.Event
	5,  // 37: chiave.Chiave.Get:output_type -> chiave.GetResponse
	2,  // 38: chiave.Chiave.Increment:output_type -> chiave.Response
	2,  // 39: chiave.Chiave.Decrement:output_type -> chiave.Response
	2,  // 40: chiave.Chiave.AddSet:output_type -> chiave.Response
	2,  // 41: chiave.Chiave.RemoveSet:output_type -> chiave.Response
	26, // 42: chiave.Chiave.ProcessEvent:output_type -> google.protobuf.Empty
	37, // [37:43] is the sub-list for method output_type
	31, // [31:37] is the sub-list for method input_type
	31, // [31:31] is the sub-list for extension type_name
	31, // [31:31] is the sub-list for extension extendee
	0,  // [0:31] is the sub-list for field type_name
}

func init() { file_chiave_proto_init() }
func file_chiave_proto_init() {
	if File_chiave_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_chiave_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chiave_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chiave_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Context); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chiave_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chiave_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DVV); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chiave_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Dot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chiave_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Event); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chiave_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpCounter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chiave_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StateCounter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chiave_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GCounter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chiave_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeltaCounter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chiave_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chiave_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetOperation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chiave_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StateSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chiave_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeltaSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chiave_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Dots); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_chiave_proto_msgTypes[6].OneofWrappers = []interface{}{
		(*Event_OpCounter)(nil),
		(*Event_StateCounter)(nil),
		(*Event_DeltaCounter)(nil),
		(*Event_OpSet)(nil),
		(*Event_StateSet)(nil),
		(*Event_DeltaSet)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_chiave_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   24,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_chiave_proto_goTypes,
		DependencyIndexes: file_chiave_proto_depIdxs,
		EnumInfos:         file_chiave_proto_enumTypes,
		MessageInfos:      file_chiave_proto_msgTypes,
	}.Build()
	File_chiave_proto = out.File
	file_chiave_proto_rawDesc = nil
	file_chiave_proto_goTypes = nil
	file_chiave_proto_depIdxs = nil
}
