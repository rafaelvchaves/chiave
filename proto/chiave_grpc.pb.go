// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.9
// source: chiave.proto

package chiave

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ChiaveClient is the client API for Chiave service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChiaveClient interface {
	GetCounter(ctx context.Context, in *Request, opts ...grpc.CallOption) (*GetCounterResponse, error)
	GetSet(ctx context.Context, in *Request, opts ...grpc.CallOption) (*GetSetResponse, error)
	Write(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	ProcessEvent(ctx context.Context, in *Event, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type chiaveClient struct {
	cc grpc.ClientConnInterface
}

func NewChiaveClient(cc grpc.ClientConnInterface) ChiaveClient {
	return &chiaveClient{cc}
}

func (c *chiaveClient) GetCounter(ctx context.Context, in *Request, opts ...grpc.CallOption) (*GetCounterResponse, error) {
	out := new(GetCounterResponse)
	err := c.cc.Invoke(ctx, "/chiave.Chiave/GetCounter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chiaveClient) GetSet(ctx context.Context, in *Request, opts ...grpc.CallOption) (*GetSetResponse, error) {
	out := new(GetSetResponse)
	err := c.cc.Invoke(ctx, "/chiave.Chiave/GetSet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chiaveClient) Write(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/chiave.Chiave/Write", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chiaveClient) ProcessEvent(ctx context.Context, in *Event, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/chiave.Chiave/ProcessEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChiaveServer is the server API for Chiave service.
// All implementations must embed UnimplementedChiaveServer
// for forward compatibility
type ChiaveServer interface {
	GetCounter(context.Context, *Request) (*GetCounterResponse, error)
	GetSet(context.Context, *Request) (*GetSetResponse, error)
	Write(context.Context, *Request) (*Response, error)
	ProcessEvent(context.Context, *Event) (*emptypb.Empty, error)
	mustEmbedUnimplementedChiaveServer()
}

// UnimplementedChiaveServer must be embedded to have forward compatible implementations.
type UnimplementedChiaveServer struct {
}

func (UnimplementedChiaveServer) GetCounter(context.Context, *Request) (*GetCounterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCounter not implemented")
}
func (UnimplementedChiaveServer) GetSet(context.Context, *Request) (*GetSetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSet not implemented")
}
func (UnimplementedChiaveServer) Write(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Write not implemented")
}
func (UnimplementedChiaveServer) ProcessEvent(context.Context, *Event) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessEvent not implemented")
}
func (UnimplementedChiaveServer) mustEmbedUnimplementedChiaveServer() {}

// UnsafeChiaveServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChiaveServer will
// result in compilation errors.
type UnsafeChiaveServer interface {
	mustEmbedUnimplementedChiaveServer()
}

func RegisterChiaveServer(s grpc.ServiceRegistrar, srv ChiaveServer) {
	s.RegisterService(&Chiave_ServiceDesc, srv)
}

func _Chiave_GetCounter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChiaveServer).GetCounter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chiave.Chiave/GetCounter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChiaveServer).GetCounter(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chiave_GetSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChiaveServer).GetSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chiave.Chiave/GetSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChiaveServer).GetSet(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chiave_Write_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChiaveServer).Write(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chiave.Chiave/Write",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChiaveServer).Write(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chiave_ProcessEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Event)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChiaveServer).ProcessEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chiave.Chiave/ProcessEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChiaveServer).ProcessEvent(ctx, req.(*Event))
	}
	return interceptor(ctx, in, info, handler)
}

// Chiave_ServiceDesc is the grpc.ServiceDesc for Chiave service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Chiave_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "chiave.Chiave",
	HandlerType: (*ChiaveServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCounter",
			Handler:    _Chiave_GetCounter_Handler,
		},
		{
			MethodName: "GetSet",
			Handler:    _Chiave_GetSet_Handler,
		},
		{
			MethodName: "Write",
			Handler:    _Chiave_Write_Handler,
		},
		{
			MethodName: "ProcessEvent",
			Handler:    _Chiave_ProcessEvent_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "chiave.proto",
}
